---
- name: create security groups
  os_security_group:
    cloud: "{{ os_cloud }}"
    state: present
    name: "{{ item.name }}"
    description: "{{ item.description | default(omit) }}"
  with_items: "{{ security_groups | default([]) }}"

- name: create security group rules
  os_security_group_rule:
    cloud: "{{ os_cloud }}"
    state: present
    security_group: "{{ item.0.name }}"
    direction: "{{ item.1.direction | default(omit) }}"
    ethertype: "{{ item.1.ethertype | default(omit) }}"
    protocol: "{{ item.1.protocol | default(omit) }}"
    remote_group: "{{ item.1.remote_group | default(omit) }}"
    remote_ip_prefix: "{{ item.1.remote_ip_prefix | default(omit) }}"
    port_range_min: "{{ item.1.port_range_min | default(omit) }}"
    port_range_max: "{{ item.1.port_range_max | default(omit) }}"
    wait: yes
  with_subelements:
    - "{{ security_groups | default([]) }}"
    - rules
    - flags:
        skip_missing: True

- name: create keys
  os_keypair:
    cloud: "{{ os_cloud }}"
    state: present
    name: "{{ item.name }}"
    public_key_file: "{{ item.public_key_file }}"
  with_items: "{{ keys }}"

- name: create servers
  os_server:
    cloud: "{{ os_cloud }}"
    name: "{{ item.name }}.{{ dns_subdomain }}"
    state: present
    region_name: RegionOne
    flavor: m1.medium
    image: "{{ item.image | default(create_hosts_default_image) }}"
    auto_ip: yes
    key_name: "{{ item.key_name | default(create_hosts_default_key_name) }}"
    nics: "{{ item.nics | default(create_hosts_default_nics) }}"
    wait: yes
    security_groups: "{{ item.security_groups | default(create_hosts_default_security_groups) }}"
  register: openstack_instances
  with_items: "{{ servers }}"

- name: associate floating ips
  os_floating_ip:
    cloud: "{{ os_cloud }}"
    server: "{{ item.name }}.{{ dns_subdomain }}"
    floating_ip_address: "{{ item.public_address }}"
    state: present
  with_items: "{{ servers }}"
  when: item.public_address is defined

- name: add hosts to known_hosts file
  include: known_hosts.yml
  with_items: "{{ openstack_instances.results }}"
